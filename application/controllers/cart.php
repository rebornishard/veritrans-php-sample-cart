<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

class Cart extends CI_Controller {

  // Displays all cart contents
  public function index()
  {
    
    $data['cart_items'] = $this->cart->contents();
    
    $this->load->view('cart/index', $data);
  }

  // Add item to cart
  public function add()
  {
    $product_query = $this->db->get_where('products', array('id' => $this->input->post('id')));
    $product = $product_query->row();

    $data = array(
      'id'		=> $product->id,
      'qty'		=> $this->input->post('qty'),
      'price' => $product->price,
      'name'	=> $product->name
      );

    $this->cart->insert($data);

    redirect('cart');

  }

  // Empty ccart
  public function clear()
  {
    $this->cart->destroy();
    redirect('cart');
  }

  // Save cart to order and  
  // redirect user to payment pag`
  public function checkout()
  {
    // Order id should be unique generated by merchant
    $order_id = random_string('alnum', 5);
    $order_id = "$order_id";

    $veritrans = new Veritrans;
    $veritrans->merchant_id = 'change_me';
    $veritrans->merchant_hash = 'change_me';
    $veritrans->settlement_type = '01';
    $veritrans->order_id = $order_id;
    $veritrans->session_id = $this->session->userdata('session_id');
    $veritrans->gross_amount = $this->cart->total();
    $veritrans->billing_address_different_with_shipping_address = '0';
    $veritrans->required_shipping_address = '1';
    $veritrans->shipping_first_name = $this->input->post('SHIPPING_FIRST_NAME');
    $veritrans->shipping_last_name = $this->input->post('SHIPPING_LAST_NAME');
    $veritrans->shipping_address1 = $this->input->post('SHIPPING_ADDRESS1');
    $veritrans->shipping_address2 = $this->input->post('SHIPPING_ADDRESS2');
    $veritrans->shipping_city = $this->input->post('SHIPPING_CITY');
    $veritrans->shipping_country_code = $this->input->post('SHIPPING_COUNTRY_CODE');
    $veritrans->shipping_postal_code = $this->input->post('SHIPPING_POSTAL_CODE');
    $veritrans->shipping_phone = $this->input->post('SHIPPING_PHONE');
    $veritrans->shipping_method = $this->input->post('SHIPPING_METHOD');
    
    $commodity = array();
    foreach ($this->cart->contents() as $item){
      $commodity_item = array("COMMODITY_ID" => $item['id'], "COMMODITY_PRICE" => $item['price'], "COMMODITY_QTY" => $item['qty'], "COMMODITY_NAME1" => $item['name'], "COMMODITY_NAME2" => $item['name']);
      array_push($commodity, $commodity_item);
    }



    $veritrans->commodity = $commodity;

    $data['key'] = $veritrans->get_keys();

    if(isset($data['key']['error_message'])){
      echo $data['key']['error_message'];
      return false;
    }


    // save order
    $data['order'] = array(
      'order_id' 		=> $order_id,
      'session_id' 	=> $this->session->userdata('session_id'),
      'amount'			=> $this->cart->total(),
      'token_browser'	=> $data['key']['token_browser'],
      'token_merchant'=> $data['key']['token_merchant']
      );
    
    $data['merchant_id'] = $veritrans->merchant_id;
    

    // save the keys for future references
    $this->db->insert('orders', $data['order']);

    $this->load->view('cart/checkout', $data);

    // $this->output->enable_profiler(TRUE);
  }


  public function payment_notification()
  {
    // Just for debuging purpose
    $post_vars = $this->populate_post_params($_POST);

    // Create VeritransNotification instance
    // It's a convinient way to evaluate veritrans payment notification params
    $veritrans_notification = new VeritransNotification($_POST);
    
    // Find our order
    $order_query = $this->db->get_where('orders', array('order_id' => $veritrans_notification->orderId));
    $order = $order_query->row();
    
    // Order exists?
    if($order_query->num_rows() < 1){
      echo "ERR";
      $this->db->insert('payment_notifications', array("params" => 'no order'));
      exit();
    }
      
    // Verify the Merchant Key 
    if($order->token_merchant != $veritrans_notification->TOKEN_MERCHANT){
      echo "ERR";
      $this->db->insert('payment_notifications', array("params" => 'no match'));
      exit();
    }
    
    // Populate veritrans notification
    $data = array(
      'postalcode'          =>  $veritrans_notification->postalcode,
      'mStatus'             =>  $veritrans_notification->mStatus, 
      'phone'               =>  $veritrans_notification->phone, 
      'shippingPhone'       =>  $veritrans_notification->shippingPhone, 
      'mErrMsg'             =>  $veritrans_notification->mErrMsg, 
      'email'               =>  $veritrans_notification->email, 
      'address'             =>  $veritrans_notification->address, 
      'name'                =>  $veritrans_notification->name,
      'vResultCode'         =>  $veritrans_notification->vResultCode, 
      'shippingAddress'     =>  $veritrans_notification->shippingAddress,
      'orderId'             =>  $veritrans_notification->orderId,
      'shippingPostalcode'  =>  $veritrans_notification->shippingPostalcode,
      'shippingName'        =>  $veritrans_notification->shippingName,
      'TOKEN_MERCHANT'      =>  $veritrans_notification->TOKEN_MERCHANT,
      'params'              =>  $post_vars
      );
    
    // Check transaction result
    if($veritrans_notification->mStatus == 'success'){
      // log the notification
      $this->db->start_cache();
      $this->db->insert('payment_notifications', $data);
      $this->db->stop_cache();
      
      $this->db->flush_cache();
      
      // Mark order as paid
      $this->db->where('order_id', $veritrans_notification->orderId);
      $this->db->update('orders', array('status' => 'paid'));      
      
      echo "OK"; 
    }else{
      $this->db->insert('payment_notifications', $data);
      echo "ERR";
    }
    

  }

  // Just for debuging purpose
  private function populate_post_params($params)
  {
    $post_vars = '';
    if(is_array($params)){ 
      $p = 0; 
      foreach ($params as $varname => $varvalue) { 
        $post_vars .= "$varname $varvalue <br> "; 
        $p++;     
      } 
    }
    
    return $post_vars;
  }
  
}
